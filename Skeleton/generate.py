#!/usr/bin/env python3

import os
import platform
import re
import shutil
import subprocess
from collections import OrderedDict
from distutils.version import LooseVersion

scriptFile = ""
scriptCallCmd = ""

if platform.system() == "Windows":
	scriptFile = "activate.bat"
	scriptCallCmd = scriptFile
else:
	scriptFile = "activate.sh"
	scriptCallCmd = ". ./" + scriptFile

packageRefDefault = "ConnectedVision/X.Y.Z@covi/stable"

conanInstallCmd = "conan install " + packageRefDefault + " -b outdated -g virtualenv"

message = "\n\nFailed to locate the Connected Vision Module Code Generator.\n"
message += "Please execute the Connected Vision environment activation script by calling " + scriptCallCmd + ".\n"
message += "The " + scriptFile + " file is generated by Conan when calling the following command:\n"
message += conanInstallCmd

cvDir = ""

if not "ConnectedVision" in os.environ:
	r = re.compile("^([^/]+)/([^@]+)@([^/]+)/([^$]+)$")

	versions = dict()
	conanSearchCmd = ["conan", "search", "ConnectedVision"]

	for line in subprocess.check_output(conanSearchCmd, universal_newlines=True).splitlines():
		m = r.match(line)
		
		if m:
			versions[m.group(2)] = m.group(0)

	if not versions:
		raise Exception("\n\nFailed to locate Connected Vision using \"" + " ".join(conanSearchCmd) + "\".")

	versionKeysSorted = sorted(versions, key=LooseVersion, reverse=True)
	versionsSorted = OrderedDict((key, versions[key]) for key in versionKeysSorted)
	version = list(versionsSorted)[0]
	packageRef = versionsSorted[version]

	conanInstallCmd = conanInstallCmd.replace(packageRefDefault, packageRef)
	subprocess.check_call(conanInstallCmd.split(" "))
	
	envExtractCmd = scriptCallCmd + " && "
	
	if platform.system() == "Windows":
		envExtractCmd += "set ConnectedVision"
	else:
		envExtractCmd += "echo ConnectedVision=${ConnectedVision}"
	
	r = re.compile("^ConnectedVision=(.+)")
	
	for line in subprocess.check_output(envExtractCmd, universal_newlines=True, shell=True).splitlines():
		m = r.match(line)
		
		if m:
			cvDir = m.group(1)
	
	if not cvDir:
		raise Exception("failed to extract ConnectedVision environment variable using the following commands: \"" + envExtractCmd + "\"")
else:
	cvDir = os.environ["ConnectedVision"]
	
if not os.path.isdir(cvDir):
	raise Exception("Connected Vision package root directory specified by ConnectedVision environment variable does not exist: " + cvDir)

moduleDir = os.path.dirname(os.path.realpath(__file__))

generatorFile = os.path.normpath(os.path.join(cvDir, "tools", "CodeFromTemplate", "bin", "ModuleGenerator.py"))

if not os.path.isfile(generatorFile):
	raise Exception("failed to determine correct Connected Vision Code Generator file path: " + generatorFile)

pythonExeName = "python3"

if not shutil.which(pythonExeName):
	pythonExeName = "python"

cmd = envExtractCmd + "&& " + pythonExeName + " " + generatorFile + " -m " + moduleDir + " -s " + os.path.join(moduleDir, "moduleStructure.json")

subprocess.check_call(cmd, shell=True)